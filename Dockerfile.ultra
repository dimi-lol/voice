# Ultra-minimal Dockerfile para Voice Chat
# Stage 1: Build frontend
FROM node:18-alpine AS frontend-builder

WORKDIR /app
COPY nextjs-voice-chat/package*.json ./
RUN npm ci --no-optional --no-audit
COPY nextjs-voice-chat/ ./
RUN npm run build

# Stage 2: Final runtime
FROM node:18-alpine

# Install Python and minimal system dependencies
RUN apk add --no-cache \
    python3 \
    py3-pip \
    curl \
    bash \
    ffmpeg

WORKDIR /app

# Copy built frontend (only what's needed)
COPY --from=frontend-builder /app/.next/standalone ./
COPY --from=frontend-builder /app/.next/static ./.next/static
COPY --from=frontend-builder /app/public ./public

# Copy backend code
COPY code/ ./code/

# Install minimal Python dependencies
COPY requirements.txt .
RUN pip3 install --no-cache-dir --no-deps \
    fastapi \
    uvicorn \
    websockets \
    numpy \
    torch \
    torchaudio \
    whisper \
    silero-vad \
    sentence-transformers \
    || pip3 install --no-cache-dir -r requirements.txt

# Copy service script
COPY start-services.sh ./
RUN chmod +x start-services.sh

# Create directories
RUN mkdir -p /app/models /app/data /app/logs

# Environment variables
ENV NODE_ENV=production
ENV NEXT_TELEMETRY_DISABLED=1
ENV PYTHONPATH=/app/code
ENV LANGUAGE=pt

# Expose ports
EXPOSE 3000 8000

# Start command
CMD ["./start-services.sh"] 